#! /usr/bin/env ruby
# coding: utf-8

require 'pathname'
require 'yaml'
require 'mysql2'

BASE_DIR = Pathname.new(File.expand_path(__FILE__)).dirname.parent.parent
DATA_DIR = BASE_DIR + "data"
LIB_DIR  = BASE_DIR + "lib" + "envlog"

OptionParser.new { |opt|
  opt.version = EnvLog::VERSION;

  opt.on("-c FILE", "--config-file=FILE") { |file|
    $config_file = file
  }

  opt.parse!(ARGV)

  raise("configuration file is not specified.") if not $config_file
}

SCHEMA = EnvLog::Schema.read(DATA_DIR + "schema.yml")
CONFIG = EnvLog::Config.read($config_file)

if CONFIG["database"].include?("mysql")
  db_cred = EnvLog::Config.fetch_path("database", "mysql")
else
  raise("MySQL configuration is not specified")
end

begin
  db = Mysql2::Client.new(db_cred)

  db.query("start transaction;")

  #
  # センサー定義テーブル
  #
  db.query(<<~EOQ)
    create table if not exists SENSOR_TABLE (
      addr         vchar(64) unique, /* センサーのアドレス(NULLは撤去済み) */
      id           char(36),         /* センサーID (UUID)                  */
      ctime        timestamp,        /* 登録日時                           */
      mtime        timestamp,        /* 更新日時                           */
      `pow-source` vchar(16),        /* 外部電源の種別                     */
      state        vchar(16),        /* 状態                               */
      `last-seq`   integer,          /* 最終シーケンス番号                 */

      primary key (id)
    ); 
  EOQ

  #
  # 環境センサーのデータを蓄積するテーブル
  #
  db.query(<<~EOQ)
    create table if not exists DATA_TABLE (
      sensor     char(36),           /* センサーID (UUID)                  */
      time       timestamp,          /* 記録日時                           */
      temp       float,              /* 気温                               */
      humidity   float,              /* 湿度                               */
      `air-pres` float,              /* 気圧                               */
      rssi       integer,            /* 計測時のRSSI                       */
      vbat       float,              /* 計測時の電池電圧                   */
      vbus       float,              /* 計測時の外部電源電圧               */

      primary key (time, sensor)
    );
  EOQ

  db.query("commit;")

rescue => e
  p e
  pp e.backtrace
  db.query("rollback;")

ensure
  db&.close
end
