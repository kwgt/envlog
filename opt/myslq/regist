#! /usr/bin/env ruby
# coding: utf-8

require 'pathname'
require 'optparse'
require 'yaml'
require 'securerandom'
require 'mysql2'

BASE_DIR    = Pathname.new(File.expand_path(__FILE__)).dirname.parent.parent
DATA_DIR    = BASE_DIR + "data"
LIB_DIR     = BASE_DIR + "lib" + "envlog"
SCHEMA_FILE = DATA_DIR + "schema.yml"

require "#{LIB_DIR + "version"}"
require "#{LIB_DIR + "misc"}"
require "#{LIB_DIR + "mysql2"}"
require "#{LIB_DIR + "schema"}"
require "#{LIB_DIR + "config"}"

using Mysql2Extender

OptionParser.new { |opt|
  opt.version = EnvLog::VERSION
  opt.banner += " BT-ADDR DESCRIPTION POWER-SOURCE"

  opt.on("-c FILE", "--config-file=FILE") { |file|
    $config_file = file
  }

  opt.parse!(ARGV)

  raise("configuration file is not specified.") if not $config_file
}

EnvLog::Schema.read(SCHEMA_FILE)
EnvLog::Config.read($config_file)

raise("arguments not enough") if ARGV.size < 3

if EnvLog::Config.has?(:database, :mysql)
  db_cred = EnvLog::Config.dig(:database, :mysql)
else
  raise("MySQL configuration is not specified")
end

addr  = ARGV[0]
id    = SecureRandom.uuid
descr = ARGV[1]
psrc  = ARGV[2]

if not ["STABLE", "BATTERY", "NONE"].include?(psrc.upcase)
  raise("invalid foreign power source type")
end

begin
  db = Mysql2::Client.new(db_cred)

  db.query("start transaction;")

  row = db.get_first_row(<<~EOQ, :as => :array)
    select id, state from SENSOR_TABLE where addr = "#{addr}";
  EOQ

  if not row
    #
    # 新規登録の場合
    #
    db.query(<<~EOQ)
      insert into SENSOR_TABLE
          values ("#{addr}",
                  "#{id}",
                  NOW(),
                  NOW(),
                  #{descr.to_mysql},
                  "#{psrc.upcase}",
                  "READY",
                  NULL);
    EOQ

  else
    id = row[0]
    st = row[1]

    if st == "UNKNOWN"
      #
      # 不明デバイスとして既に登録ずみだった場合
      #
      db.query(<<~EOQ)
        update SENSOR_TABLE
            set mtime        = NOW(),
                descr        = #{descr.to_mysql},
                `pow-source` = "#{psrc}",
                state        = "READY",
                `last-seq`   = NULL
            where id = "#{id}";
      EOQ

    else
      raise("device #{addr} is working now")
    end
  end

  db.query("commit;")

rescue => e
  p e
  pp e.backtrace
  db.query("rollback;")

ensure
  db&.close
end
