#! /usr/bin/env ruby
# coding: utf-8

require 'pathname'
require 'optparse'
require 'yaml'
require 'securerandom'
require 'sqlite3'

BASE_DIR    = Pathname.new(File.expand_path(__FILE__)).dirname.parent.parent
DATA_DIR    = BASE_DIR + "data"
LIB_DIR     = BASE_DIR + "lib" + "envlog"
SCHEMA_FILE = DATA_DIR + "schema.yml"

require "#{LIB_DIR + "version"}"
require "#{LIB_DIR + "misc"}"
require "#{LIB_DIR + "schema"}"
require "#{LIB_DIR + "config"}"

OptionParser.new { |opt|
  opt.version = EnvLog::VERSION
  opt.banner += " BT-ADDR DESCRIPTION POWER-SOURCE"

  opt.on("-c FILE", "--config-file=FILE") { |file|
    $config_file = file
  }

  opt.parse!(ARGV)

  raise("configuration file is not specified.") if not $config_file
}

EnvLog::Schema.read(SCHEMA_FILE)
EnvLog::Config.read($config_file)

raise("arguments not enough") if ARGV.size < 3

addr  = ARGV[1]
id    = SecureRandom.uuid
descr = ARGV[2]
psrc  = ARGV[3]

if EnvLog::Config.has?(:database, :sqlite3)
  db_path = EnvLog::Config.fetch_path(:database, :sqlite3, :path)
else
  raise("SQLite3 configuration is not specified")
end

begin
  db = SQLite3::Database.new(db_path.to_s)

  db.transaction

  db.execute2(<<~EOQ, addr)
    update SENSOR_TABLE set addr = NULL where addr = ?;
  EOQ

  db.execute2(<<~EOQ, addr, id, descr, psrc)
    insert into SENSOR_TABLE
        values (?,
                ?,
                datetime('now', 'localtime'),
                datetime('now', 'localtime'),
                ?,
                ?,
                NULL,
                NULL);
  EOQ

  db.commit

rescue => e
  p e
  pp e.backtrace
  db.rollback

ensure
  db&.close
end
